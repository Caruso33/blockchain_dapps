{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Raffle__PlayerEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "Raffle__RaffleWinnerRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raffleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Raffle__WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRaffleId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd38d382c42be383ea333f0102b47f6bb944ab03931a4aee59e8d3a17f6b81dfc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1305402",
    "logsBloom": "0x
    "blockHash": "0x2c6d0b2162867314e426eaedc69dc9ada12fe74c37bdab555b54c85a4ba1fe15",
    "transactionHash": "0xd38d382c42be383ea333f0102b47f6bb944ab03931a4aee59e8d3a17f6b81dfc",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1305402",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "30",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "955a31873ac523f153e4a3306c0a2189",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Raffle__PlayerEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"Raffle__RaffleWinnerRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Raffle__WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRaffleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nerror Raffle__NotEnoughEthEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__RaffleNotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256, uint256, uint256);\\n\\n/* \\n    @title A sample Raffle Contract\\n    @author Tobias Leinss\\n    @notice This contract is for creating an untamperable decentralized lottery.\\n    @dev This implements Chainlink's VRFConsumerBaseV2 and Keepers.\\n */\\ncontract Raffle is VRFConsumerBaseV2 {\\n    /* Imports */\\n    using Counters for Counters.Counter;\\n\\n    /* Types */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* State variables */\\n    Counters.Counter private s_currentRaffleId;\\n    RaffleState private s_raffleState = RaffleState.OPEN;\\n\\n    uint256 private immutable i_entranceFee;\\n    uint256 private immutable i_interval;\\n\\n    address payable[] private s_players;\\n    address payable private s_recentWinner;\\n    uint256 private s_lastTimestamp;\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 3;\\n\\n    /* Events */\\n    event Raffle__PlayerEntered(address indexed player, uint256 amount);\\n    event Raffle__RaffleWinnerRequested(uint256 requestId);\\n    event Raffle__WinnerPicked(uint256 raffleId, address indexed player, uint256 amount);\\n\\n    /* Functions */\\n    constructor(\\n        uint256 _entranceFee,\\n        uint256 _interval,\\n        address vrfCoordinatorV2,\\n        bytes32 _gasLane,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = _entranceFee;\\n        i_interval = _interval;\\n        s_lastTimestamp = block.timestamp;\\n\\n        s_currentRaffleId.increment();\\n\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = _gasLane;\\n        i_subscriptionId = _subscriptionId;\\n        i_callbackGasLimit = _callbackGasLimit;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughEthEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__RaffleNotOpen();\\n        }\\n\\n        s_players.push(payable(msg.sender));\\n\\n        emit Raffle__PlayerEntered(msg.sender, msg.value);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n\\n        s_raffleState = RaffleState.CALCULATING;\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit Raffle__RaffleWinnerRequested(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[winnerIndex];\\n        s_recentWinner = recentWinner;\\n\\n        uint256 raffleBalance = address(this).balance;\\n        (bool success, ) = recentWinner.call{value: raffleBalance}(\\\"\\\");\\n\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n\\n        s_lastTimestamp = block.timestamp;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n\\n        uint256 raffleId = s_currentRaffleId.current();\\n        emit Raffle__WinnerPicked(raffleId, recentWinner, raffleBalance);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        returns (\\n            // override\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = s_raffleState == RaffleState.OPEN;\\n        bool timePassed = (block.timestamp - s_lastTimestamp) > i_interval;\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n\\n        upkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n    }\\n\\n    /* View functions */\\n    function getCurrentRaffleId() public view returns (uint256) {\\n        return s_currentRaffleId.current();\\n    }\\n\\n    function getRaffleState() public view returns (uint256) {\\n        return uint256(s_raffleState);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getPlayers() public view returns (address payable[] memory) {\\n        return s_players;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getRecentWinner() public view returns (address payable) {\\n        return s_recentWinner;\\n    }\\n\\n    function getLatestTimestamp() public view returns (uint256) {\\n        return s_lastTimestamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint16) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n}\\n\",\"keccak256\":\"0xebc81d04f2565ff745401d26501a725645551de43e99565d574e484c8ae06c02\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040526000600160006101000a81548160ff021916908360018111156200002e576200002d6200015b565b5b02179055503480156200004057600080fd5b506040516200199e3803806200199e8339818101604052810190620000669190620002f0565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508560a081815250508460c0818152505042600481905550620000ca60006200014560201b620009351760201c565b8373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508261010081815250508167ffffffffffffffff166101208167ffffffffffffffff16815250508063ffffffff166101408163ffffffff16815250505050505050506200038c565b6001816000016000828254019250508190555050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b6000819050919050565b620001a4816200018f565b8114620001b057600080fd5b50565b600081519050620001c48162000199565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001f782620001ca565b9050919050565b6200020981620001ea565b81146200021557600080fd5b50565b6000815190506200022981620001fe565b92915050565b6000819050919050565b62000244816200022f565b81146200025057600080fd5b50565b600081519050620002648162000239565b92915050565b600067ffffffffffffffff82169050919050565b62000289816200026a565b81146200029557600080fd5b50565b600081519050620002a9816200027e565b92915050565b600063ffffffff82169050919050565b620002ca81620002af565b8114620002d657600080fd5b50565b600081519050620002ea81620002bf565b92915050565b60008060008060008060c0878903121562000310576200030f6200018a565b5b60006200032089828a01620001b3565b96505060206200033389828a01620001b3565b95505060406200034689828a0162000218565b94505060606200035989828a0162000253565b93505060806200036c89828a0162000298565b92505060a06200037f89828a01620002d9565b9150509295509295509295565b60805160a05160c05160e0516101005161012051610140516115a2620003fc60003960006106a60152600061068301526000610662015260006106260152600081816107ed01526108fa0152600081816102e801526103f7015260008181610337015261038b01526115a26000f3fe6080604052600436106100c25760003560e01c80635f1b0fd81161007f5780638b5b9ccc116100595780638b5b9ccc1461023857806391ad27b414610263578063f43b52cb1461028e578063fd6673f5146102b9576100c2565b80635f1b0fd8146101a45780636e04ff0d146101cf578063804b96ba1461020d576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102e4565b6040516100e99190610c6e565b60405180910390f35b3480156100fe57600080fd5b5061010761030c565b6040516101149190610c6e565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e22565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610ed9565b61056f565b005b34801561018557600080fd5b5061018e610778565b60405161019b9190610f67565b60405180910390f35b3480156101b057600080fd5b506101b96107a2565b6040516101c69190610f9f565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f1919061106f565b6107ab565b60405161020492919061115b565b60405180910390f35b34801561021957600080fd5b50610222610857565b60405161022f9190610c6e565b60405180910390f35b34801561024457600080fd5b5061024d610868565b60405161025a9190611249565b60405180910390f35b34801561026f57600080fd5b506102786108f6565b6040516102859190610c6e565b60405180910390f35b34801561029a57600080fd5b506102a361091e565b6040516102b09190610c6e565b60405180910390f35b3480156102c557600080fd5b506102ce610928565b6040516102db9190610c6e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff1660018111156103305761032f61126b565b5b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de9291906112bb565b60405180910390fd5b6103f1828261094b565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104635761046261126b565b5b600160009054906101000a900460ff1660018111156104855761048461126b565b5b146104bc576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f139478f9146683c028a60fcd7c2669a4d6bfd1b76cd3235e2752c9827ad68da6346040516105659190610c6e565b60405180910390a2565b6000610589604051806020016040528060008152506107ab565b509050806105f85747600280549050600160009054906101000a900460ff1660018111156105ba576105b961126b565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ef939291906112e4565b60405180910390fd5b60018060006101000a81548160ff0219169083600181111561061d5761061c61126b565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060036040518663ffffffff1660e01b81526004016106e7959493929190611376565b602060405180830381600087803b15801561070157600080fd5b505af1158015610715573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073991906113de565b90507fa6c7ba1f546788b79b686c76235002753ace2bc0945ffb0e8cc72c0a720661188160405161076a9190610c6e565b60405180910390a150505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006003905090565b6000606060008060018111156107c4576107c361126b565b5b600160009054906101000a900460ff1660018111156107e6576107e561126b565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006004544261081a919061143a565b1190506000806002805490501190506000804711905083801561083a5750825b80156108435750815b801561084c5750805b955050505050915091565b60006108636000610ba0565b905090565b606060028054806020026020016040519081016040528092919081815260200182805480156108ec57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108a2575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600454905090565b6000600280549050905090565b6001816000016000828254019250508190555050565b6000600280549050826000815181106109675761096661146e565b5b602002602001015161097991906114cc565b90506000600282815481106109915761099061146e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600047905060008273ffffffffffffffffffffffffffffffffffffffff1682604051610a2a9061152e565b60006040518083038185875af1925050503d8060008114610a67576040519150601f19603f3d011682016040523d82523d6000602084013e610a6c565b606091505b5050905080610aa7576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426004819055506000600160006101000a81548160ff02191690836001811115610ad457610ad361126b565b5b0217905550600067ffffffffffffffff811115610af457610af3610cdf565b5b604051908082528060200260200182016040528015610b225781602001602082028036833780820191505090505b5060029080519060200190610b38929190610bae565b506000610b456000610ba0565b90508373ffffffffffffffffffffffffffffffffffffffff167fe9f404b80ae3feeb5f1c1346b4c9f34c9ef2eba210696b5cc4490c4c745607758285604051610b8f929190611543565b60405180910390a250505050505050565b600081600001549050919050565b828054828255906000526020600020908101928215610c27579160200282015b82811115610c265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bce565b5b509050610c349190610c38565b5090565b5b80821115610c51576000816000905550600101610c39565b5090565b6000819050919050565b610c6881610c55565b82525050565b6000602082019050610c836000830184610c5f565b92915050565b6000604051905090565b600080fd5b600080fd5b610ca681610c55565b8114610cb157600080fd5b50565b600081359050610cc381610c9d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d1782610cce565b810181811067ffffffffffffffff82111715610d3657610d35610cdf565b5b80604052505050565b6000610d49610c89565b9050610d558282610d0e565b919050565b600067ffffffffffffffff821115610d7557610d74610cdf565b5b602082029050602081019050919050565b600080fd5b6000610d9e610d9984610d5a565b610d3f565b90508083825260208201905060208402830185811115610dc157610dc0610d86565b5b835b81811015610dea5780610dd68882610cb4565b845260208401935050602081019050610dc3565b5050509392505050565b600082601f830112610e0957610e08610cc9565b5b8135610e19848260208601610d8b565b91505092915050565b60008060408385031215610e3957610e38610c93565b5b6000610e4785828601610cb4565b925050602083013567ffffffffffffffff811115610e6857610e67610c98565b5b610e7485828601610df4565b9150509250929050565b600080fd5b60008083601f840112610e9957610e98610cc9565b5b8235905067ffffffffffffffff811115610eb657610eb5610e7e565b5b602083019150836001820283011115610ed257610ed1610d86565b5b9250929050565b60008060208385031215610ef057610eef610c93565b5b600083013567ffffffffffffffff811115610f0e57610f0d610c98565b5b610f1a85828601610e83565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f5182610f26565b9050919050565b610f6181610f46565b82525050565b6000602082019050610f7c6000830184610f58565b92915050565b600061ffff82169050919050565b610f9981610f82565b82525050565b6000602082019050610fb46000830184610f90565b92915050565b600080fd5b600067ffffffffffffffff821115610fda57610fd9610cdf565b5b610fe382610cce565b9050602081019050919050565b82818337600083830152505050565b600061101261100d84610fbf565b610d3f565b90508281526020810184848401111561102e5761102d610fba565b5b611039848285610ff0565b509392505050565b600082601f83011261105657611055610cc9565b5b8135611066848260208601610fff565b91505092915050565b60006020828403121561108557611084610c93565b5b600082013567ffffffffffffffff8111156110a3576110a2610c98565b5b6110af84828501611041565b91505092915050565b60008115159050919050565b6110cd816110b8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561110d5780820151818401526020810190506110f2565b8381111561111c576000848401525b50505050565b600061112d826110d3565b61113781856110de565b93506111478185602086016110ef565b61115081610cce565b840191505092915050565b600060408201905061117060008301856110c4565b81810360208301526111828184611122565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6111c081610f46565b82525050565b60006111d283836111b7565b60208301905092915050565b6000602082019050919050565b60006111f68261118b565b6112008185611196565b935061120b836111a7565b8060005b8381101561123c57815161122388826111c6565b975061122e836111de565b92505060018101905061120f565b5085935050505092915050565b6000602082019050818103600083015261126381846111eb565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006112a582610f26565b9050919050565b6112b58161129a565b82525050565b60006040820190506112d060008301856112ac565b6112dd60208301846112ac565b9392505050565b60006060820190506112f96000830186610c5f565b6113066020830185610c5f565b6113136040830184610c5f565b949350505050565b6000819050919050565b61132e8161131b565b82525050565b600067ffffffffffffffff82169050919050565b61135181611334565b82525050565b600063ffffffff82169050919050565b61137081611357565b82525050565b600060a08201905061138b6000830188611325565b6113986020830187611348565b6113a56040830186610f90565b6113b26060830185611367565b6113bf6080830184611367565b9695505050505050565b6000815190506113d881610c9d565b92915050565b6000602082840312156113f4576113f3610c93565b5b6000611402848285016113c9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061144582610c55565b915061145083610c55565b9250828210156114635761146261140b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114d782610c55565b91506114e283610c55565b9250826114f2576114f161149d565b5b828206905092915050565b600081905092915050565b50565b60006115186000836114fd565b915061152382611508565b600082019050919050565b60006115398261150b565b9150819050919050565b60006040820190506115586000830185610c5f565b6115656020830184610c5f565b939250505056fea2646970667358221220f78e8f93f3e544608c4cebe1a98a70ed31db14e3bbf3dd1c325d81612e66cb0c64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80635f1b0fd81161007f5780638b5b9ccc116100595780638b5b9ccc1461023857806391ad27b414610263578063f43b52cb1461028e578063fd6673f5146102b9576100c2565b80635f1b0fd8146101a45780636e04ff0d146101cf578063804b96ba1461020d576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102e4565b6040516100e99190610c6e565b60405180910390f35b3480156100fe57600080fd5b5061010761030c565b6040516101149190610c6e565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e22565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610ed9565b61056f565b005b34801561018557600080fd5b5061018e610778565b60405161019b9190610f67565b60405180910390f35b3480156101b057600080fd5b506101b96107a2565b6040516101c69190610f9f565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f1919061106f565b6107ab565b60405161020492919061115b565b60405180910390f35b34801561021957600080fd5b50610222610857565b60405161022f9190610c6e565b60405180910390f35b34801561024457600080fd5b5061024d610868565b60405161025a9190611249565b60405180910390f35b34801561026f57600080fd5b506102786108f6565b6040516102859190610c6e565b60405180910390f35b34801561029a57600080fd5b506102a361091e565b6040516102b09190610c6e565b60405180910390f35b3480156102c557600080fd5b506102ce610928565b6040516102db9190610c6e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff1660018111156103305761032f61126b565b5b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de9291906112bb565b60405180910390fd5b6103f1828261094b565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104635761046261126b565b5b600160009054906101000a900460ff1660018111156104855761048461126b565b5b146104bc576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f139478f9146683c028a60fcd7c2669a4d6bfd1b76cd3235e2752c9827ad68da6346040516105659190610c6e565b60405180910390a2565b6000610589604051806020016040528060008152506107ab565b509050806105f85747600280549050600160009054906101000a900460ff1660018111156105ba576105b961126b565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ef939291906112e4565b60405180910390fd5b60018060006101000a81548160ff0219169083600181111561061d5761061c61126b565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060036040518663ffffffff1660e01b81526004016106e7959493929190611376565b602060405180830381600087803b15801561070157600080fd5b505af1158015610715573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073991906113de565b90507fa6c7ba1f546788b79b686c76235002753ace2bc0945ffb0e8cc72c0a720661188160405161076a9190610c6e565b60405180910390a150505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006003905090565b6000606060008060018111156107c4576107c361126b565b5b600160009054906101000a900460ff1660018111156107e6576107e561126b565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006004544261081a919061143a565b1190506000806002805490501190506000804711905083801561083a5750825b80156108435750815b801561084c5750805b955050505050915091565b60006108636000610ba0565b905090565b606060028054806020026020016040519081016040528092919081815260200182805480156108ec57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108a2575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600454905090565b6000600280549050905090565b6001816000016000828254019250508190555050565b6000600280549050826000815181106109675761096661146e565b5b602002602001015161097991906114cc565b90506000600282815481106109915761099061146e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600047905060008273ffffffffffffffffffffffffffffffffffffffff1682604051610a2a9061152e565b60006040518083038185875af1925050503d8060008114610a67576040519150601f19603f3d011682016040523d82523d6000602084013e610a6c565b606091505b5050905080610aa7576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426004819055506000600160006101000a81548160ff02191690836001811115610ad457610ad361126b565b5b0217905550600067ffffffffffffffff811115610af457610af3610cdf565b5b604051908082528060200260200182016040528015610b225781602001602082028036833780820191505090505b5060029080519060200190610b38929190610bae565b506000610b456000610ba0565b90508373ffffffffffffffffffffffffffffffffffffffff167fe9f404b80ae3feeb5f1c1346b4c9f34c9ef2eba210696b5cc4490c4c745607758285604051610b8f929190611543565b60405180910390a250505050505050565b600081600001549050919050565b828054828255906000526020600020908101928215610c27579160200282015b82811115610c265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bce565b5b509050610c349190610c38565b5090565b5b80821115610c51576000816000905550600101610c39565b5090565b6000819050919050565b610c6881610c55565b82525050565b6000602082019050610c836000830184610c5f565b92915050565b6000604051905090565b600080fd5b600080fd5b610ca681610c55565b8114610cb157600080fd5b50565b600081359050610cc381610c9d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d1782610cce565b810181811067ffffffffffffffff82111715610d3657610d35610cdf565b5b80604052505050565b6000610d49610c89565b9050610d558282610d0e565b919050565b600067ffffffffffffffff821115610d7557610d74610cdf565b5b602082029050602081019050919050565b600080fd5b6000610d9e610d9984610d5a565b610d3f565b90508083825260208201905060208402830185811115610dc157610dc0610d86565b5b835b81811015610dea5780610dd68882610cb4565b845260208401935050602081019050610dc3565b5050509392505050565b600082601f830112610e0957610e08610cc9565b5b8135610e19848260208601610d8b565b91505092915050565b60008060408385031215610e3957610e38610c93565b5b6000610e4785828601610cb4565b925050602083013567ffffffffffffffff811115610e6857610e67610c98565b5b610e7485828601610df4565b9150509250929050565b600080fd5b60008083601f840112610e9957610e98610cc9565b5b8235905067ffffffffffffffff811115610eb657610eb5610e7e565b5b602083019150836001820283011115610ed257610ed1610d86565b5b9250929050565b60008060208385031215610ef057610eef610c93565b5b600083013567ffffffffffffffff811115610f0e57610f0d610c98565b5b610f1a85828601610e83565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f5182610f26565b9050919050565b610f6181610f46565b82525050565b6000602082019050610f7c6000830184610f58565b92915050565b600061ffff82169050919050565b610f9981610f82565b82525050565b6000602082019050610fb46000830184610f90565b92915050565b600080fd5b600067ffffffffffffffff821115610fda57610fd9610cdf565b5b610fe382610cce565b9050602081019050919050565b82818337600083830152505050565b600061101261100d84610fbf565b610d3f565b90508281526020810184848401111561102e5761102d610fba565b5b611039848285610ff0565b509392505050565b600082601f83011261105657611055610cc9565b5b8135611066848260208601610fff565b91505092915050565b60006020828403121561108557611084610c93565b5b600082013567ffffffffffffffff8111156110a3576110a2610c98565b5b6110af84828501611041565b91505092915050565b60008115159050919050565b6110cd816110b8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561110d5780820151818401526020810190506110f2565b8381111561111c576000848401525b50505050565b600061112d826110d3565b61113781856110de565b93506111478185602086016110ef565b61115081610cce565b840191505092915050565b600060408201905061117060008301856110c4565b81810360208301526111828184611122565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6111c081610f46565b82525050565b60006111d283836111b7565b60208301905092915050565b6000602082019050919050565b60006111f68261118b565b6112008185611196565b935061120b836111a7565b8060005b8381101561123c57815161122388826111c6565b975061122e836111de565b92505060018101905061120f565b5085935050505092915050565b6000602082019050818103600083015261126381846111eb565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006112a582610f26565b9050919050565b6112b58161129a565b82525050565b60006040820190506112d060008301856112ac565b6112dd60208301846112ac565b9392505050565b60006060820190506112f96000830186610c5f565b6113066020830185610c5f565b6113136040830184610c5f565b949350505050565b6000819050919050565b61132e8161131b565b82525050565b600067ffffffffffffffff82169050919050565b61135181611334565b82525050565b600063ffffffff82169050919050565b61137081611357565b82525050565b600060a08201905061138b6000830188611325565b6113986020830187611348565b6113a56040830186610f90565b6113b26060830185611367565b6113bf6080830184611367565b9695505050505050565b6000815190506113d881610c9d565b92915050565b6000602082840312156113f4576113f3610c93565b5b6000611402848285016113c9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061144582610c55565b915061145083610c55565b9250828210156114635761146261140b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114d782610c55565b91506114e283610c55565b9250826114f2576114f161149d565b5b828206905092915050565b600081905092915050565b50565b60006115186000836114fd565b915061152382611508565b600082019050919050565b60006115398261150b565b9150819050919050565b60006040820190506115586000830185610c5f565b6115656020830184610c5f565b939250505056fea2646970667358221220f78e8f93f3e544608c4cebe1a98a70ed31db14e3bbf3dd1c325d81612e66cb0c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 258,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_currentRaffleId",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)159_storage"
      },
      {
        "astId": 263,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(RaffleState)255"
      },
      {
        "astId": 270,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 272,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 274,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)255": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_struct(Counter)159_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 158,
            "contract": "contracts/Raffle.sol:Raffle",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}